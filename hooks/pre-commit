#!/usr/bin/env perl

use v5.20;
use strict;
use warnings;

use File::Basename;
use Hash::Union qw(union);
use IPC::Open3;
use List::Util qw(any);
use YAML;

my $config_file = "commit-tests.yaml";
my $config = Load(<<"...");
tools:
  pylint:
    flags: "--disable=C -"
    name-flag: "--from-stdin"
    error-codes: [32]
    fail-codes: [1, 2, 3]
  flake8:
    flags: "--count"
    name-flag: "--stdin-display-name"
  shellcheck:
    flags: "-"
    error-codes: [2, 3, 4, 5]
    err: stdout
  xmllint:
    flags: "-"
    fail-codes: [1] # Need to check this
    out: stderr
  jq:
    flags: "empty"
    fail-codes: [1] # Need to check this
    out: stderr
  yamllint:
    flags: "--strict -"
    fail-codes: [1] # Need to check this
  eslint:
    flags: "--stdin"
    name-flag: "--stdin-filename"
    fail-codes: [1]
    error-codes: [2]
  stylelint:
    flags: "--formatter compact"
    name-flag: "--stdin-filename"
    fail-codes: [2]
    error-codes: [1, 78]
    err: stdout
lang:
  shell:
    exts: ["sh", "bash", "zsh", "ksh", "csh"]
    bangs: ["sh", "bash", "zsh", "ksh", "csh"]
    tools:
      - shellcheck:
          extra-flags: "-S warning"
          fail-codes: [1]
      - shellcheck
  python:
    exts: ["py"]
    bangs: ["python", "python3"]
    tools: [pylint, flake8]
  javascript:
    exts: ["js"]
    tools: [eslint]
  html:
    exts: ["html", "xhtml", "htm"]
    tools:
      - xmllint:
          extra-flags: "--html"
  css:
    exts: ["css", "sass"]
    tools: [stylelint]
  json:
    exts: ["json"]
    tools: [jq]
  xml:
    exts: ["xml"]
    tools: [xmllint]
  yaml:
    exts: ["yml", "yaml"]
    tools: [yamllint]
...

# Read and merge user config
if (-f $config_file) {
    open YML, "<$config_file";
    $config = union([$config, Load(do { local $/; <YML>})]);
    close YML;
}

sub match_lang {
    my ($key, $val) = @_;
    for my $lang (keys %{$config->{lang}}) {
        my $vals = $config->{lang}->{$lang}->{$key};
        return $lang if any {$_ eq $val} @{$vals};
    }
}

sub parse_ext {
    my $filename = shift;
    my ($ext) = $filename =~ /.\.(\w+)$/;
    if (defined $ext) {
        return match_lang "exts", $ext;
    }
}

sub parse_shebang {
    my $obj_sha = shift;
    my $first_line = `git cat-file -p $obj_sha | head -n1 | head -c256`;

    my ($path, $arg1) = $first_line =~ /^#!\s*(\S+)\s+(\S+)?/;

    if (defined $path) {
        my $prog = basename $path;
        if ($prog eq "env") {
            $prog = $arg1;
        }
        return match_lang "bangs", $prog;
    }
}

sub run_cmd {
    my ($cmd, $contents) = @_;
    my $pid = open3(\*IN, \*OUT, \*ERR, $cmd);
    print IN "$contents";       #"$contents";
    close IN;
    my @stdout = <OUT>;
    my @stderr = <ERR>;
    close OUT; close ERR;
    waitpid $pid, 0;
    return \@stdout, \@stderr, $? >> 8;
}

sub build_cmd {
    my ($tool, $filename) = @_;

    my $cmd  = "$tool->{path}";
    $cmd .= " $tool->{flags}"                   if exists $tool->{flags};
    $cmd .= " $tool->{'extra-flags'}"           if exists $tool->{'extra-flags'};
    $cmd .= " $tool->{'name-flag'} '$filename'" if exists $tool->{'name-flag'};
    return $cmd;
}

sub run_tool {
    my ($tool, $filename, $contents) = @_;

    if (! -x "$tool->{path}") {
        say "Failed to run $tool->{name}: cannot execute $tool->{path}";
        return 1;
    }

    my $cmd = build_cmd $tool, $filename;
    say $cmd;
    print "\t$tool->{name} ";

    my ($stdout, $stderr, $retcode) = run_cmd $cmd, $contents;
    say "[" . $retcode .  "]";

    my $fail_codes  = $tool->{'fail-codes'}  // [];
    my $error_codes = $tool->{'error-codes'} // [];

    if (any {$_ == $retcode} @{$error_codes}) {
        if (exists $tool->{err} and $tool->{err} eq "stdout") {
            say @{$stdout};
        } else {
            say @{$stderr};
        }
        say "$tool->{name} encountered an error!";
        return 0;
    }
    else {
        if (exists $tool->{out} and $tool->{out} eq "stderr") {
            say @{$stderr};
        } else {
            say @{$stdout};
        }
        if (any {$_ == $retcode} @{$fail_codes}) {
            say "Error in $filename";
            return 0;
        }
    }
    return 1;
}

sub process_lang {
    my ($langconf, $files) = @_;
    my $failure = 0;

    # Store tools in order with merged config from tools and $langconf->tools
    my @tools;
    for my $tool (@{$langconf->{tools}}) {
        my ($toolname, $toolconf);

        if (ref $tool eq "HASH") {
            ($toolname) = keys %{$tool};
            $toolconf = union([$config->{tools}->{$toolname}, $tool->{$toolname}]);
        } else {
            $toolname = $tool;
            $toolconf = $config->{tools}->{$toolname};
        }

        $toolconf->{name} = $toolname;
        chomp ($toolconf->{path} = `which $toolname`) if not exists $toolconf->{path};
        push @tools, $toolconf;
    }

    # Run all tools over each file
    for my $file (@{$files}) {
        my ($filename, $obj_sha) = @{$file};
        say "$filename:";
        say "-" x 80;
        my $contents = `git cat-file -p $obj_sha`;
        for my $tool (@tools) {
            $failure |= run_tool $tool, $filename, $contents;
        }
    }
    return $failure;
}

# Get the previous commit to build list of staged files
my $rev = "HEAD";
if (system("git rev-parse --verify HEAD >/dev/null 2>&1")) {
    # If HEAD has no referent, create tree pointing to /dev/null for comparison
    $rev = `git hash-object -t tree /dev/null`;
}

# Build file mapping from list of staged files
my %files_by_lang;
for (`git diff-index --cached --full-index --diff-filter="ACMR" $rev`) {
    # Dispatch file to handler based on extension
    my @fields = split;
    my $new_obj      = $fields[3];
    my $filename     = $fields[5];

    # If filename lacks extension, try extracting shebang, otherwise skip
    my $lang = parse_ext $filename // parse_shebang $new_obj;

    push @{$files_by_lang{$lang}}, [$filename, $new_obj] if defined $lang;
}

# For all collected files, run appropriate tools keeping track of error status
my $failure = 0;
for my $lang (keys %files_by_lang) {
    next unless exists $config->{lang}->{$lang}
            and exists $config->{lang}->{$lang}->{tools};

    my %langconf = %{$config->{lang}->{$lang}};

    say "Processing filetype: $lang";
    say "=" x 80;
    $failure |= process_lang \%langconf, $files_by_lang{$lang};
}
exit $failure;
